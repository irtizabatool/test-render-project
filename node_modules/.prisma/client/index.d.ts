
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  password: string
  firstName: string
  lastName: string
  profilePicture: string | null
  role: RoleType
  status: UserStatus
  loginAccess: boolean
  organisationId: string
  createdAt: Date
  updatedAt: Date | null
}

/**
 * Model ResumeSource
 * 
 */
export type ResumeSource = {
  id: string
  sourceName: string
  organisationId: string
  deleted: boolean
  createdAt: Date
  updatedAt: Date | null
}

/**
 * Model Skill
 * 
 */
export type Skill = {
  id: string
  skillName: string
  organisationId: string
  deleted: boolean
  createdAt: Date
  updatedAt: Date | null
}

/**
 * Model Organisation
 * 
 */
export type Organisation = {
  id: string
  companyName: string
  companyDescription: string | null
  createdAt: Date
  updatedAt: Date | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const RoleType: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  RECRUITER_ADMIN: 'RECRUITER_ADMIN',
  TEAM_LEAD: 'TEAM_LEAD',
  INTERVIEWER: 'INTERVIEWER',
  RESUME_SCREENER: 'RESUME_SCREENER',
  TELEPHONE_SCREENER: 'TELEPHONE_SCREENER'
};

export type RoleType = (typeof RoleType)[keyof typeof RoleType]


export const UserStatus: {
  INVITED: 'INVITED',
  JOINED: 'JOINED',
  DEACTIVATED: 'DEACTIVATED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.resumeSource`: Exposes CRUD operations for the **ResumeSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResumeSources
    * const resumeSources = await prisma.resumeSource.findMany()
    * ```
    */
  get resumeSource(): Prisma.ResumeSourceDelegate<GlobalReject>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<GlobalReject>;

  /**
   * `prisma.organisation`: Exposes CRUD operations for the **Organisation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organisations
    * const organisations = await prisma.organisation.findMany()
    * ```
    */
  get organisation(): Prisma.OrganisationDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.2.1
   * Query Engine version: 2920a97877e12e055c1333079b8d19cee7f33826
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    ResumeSource: 'ResumeSource',
    Skill: 'Skill',
    Organisation: 'Organisation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrganisationCountOutputType
   */


  export type OrganisationCountOutputType = {
    users: number
    resumeSources: number
    skills: number
  }

  export type OrganisationCountOutputTypeSelect = {
    users?: boolean
    resumeSources?: boolean
    skills?: boolean
  }

  export type OrganisationCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OrganisationCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OrganisationCountOutputType
    : S extends undefined
    ? never
    : S extends OrganisationCountOutputTypeArgs
    ?'include' extends U
    ? OrganisationCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OrganisationCountOutputType ? OrganisationCountOutputType[P] : never
  } 
    : OrganisationCountOutputType
  : OrganisationCountOutputType




  // Custom InputTypes

  /**
   * OrganisationCountOutputType without action
   */
  export type OrganisationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OrganisationCountOutputType
     * 
    **/
    select?: OrganisationCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    profilePicture: string | null
    role: RoleType | null
    status: UserStatus | null
    loginAccess: boolean | null
    organisationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    profilePicture: string | null
    role: RoleType | null
    status: UserStatus | null
    loginAccess: boolean | null
    organisationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    profilePicture: number
    role: number
    status: number
    loginAccess: number
    organisationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    profilePicture?: true
    role?: true
    status?: true
    loginAccess?: true
    organisationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    profilePicture?: true
    role?: true
    status?: true
    loginAccess?: true
    organisationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    profilePicture?: true
    role?: true
    status?: true
    loginAccess?: true
    organisationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture: string | null
    role: RoleType
    status: UserStatus
    loginAccess: boolean
    organisationId: string
    createdAt: Date
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    profilePicture?: boolean
    role?: boolean
    status?: boolean
    loginAccess?: boolean
    organisationId?: boolean
    organisation?: boolean | OrganisationArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude = {
    organisation?: boolean | OrganisationArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organisation<T extends OrganisationArgs = {}>(args?: Subset<T, OrganisationArgs>): CheckSelect<T, Prisma__OrganisationClient<Organisation | null >, Prisma__OrganisationClient<OrganisationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model ResumeSource
   */


  export type AggregateResumeSource = {
    _count: ResumeSourceCountAggregateOutputType | null
    _min: ResumeSourceMinAggregateOutputType | null
    _max: ResumeSourceMaxAggregateOutputType | null
  }

  export type ResumeSourceMinAggregateOutputType = {
    id: string | null
    sourceName: string | null
    organisationId: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeSourceMaxAggregateOutputType = {
    id: string | null
    sourceName: string | null
    organisationId: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResumeSourceCountAggregateOutputType = {
    id: number
    sourceName: number
    organisationId: number
    deleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResumeSourceMinAggregateInputType = {
    id?: true
    sourceName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeSourceMaxAggregateInputType = {
    id?: true
    sourceName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResumeSourceCountAggregateInputType = {
    id?: true
    sourceName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResumeSourceAggregateArgs = {
    /**
     * Filter which ResumeSource to aggregate.
     * 
    **/
    where?: ResumeSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeSources to fetch.
     * 
    **/
    orderBy?: Enumerable<ResumeSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ResumeSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeSources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeSources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResumeSources
    **/
    _count?: true | ResumeSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeSourceMaxAggregateInputType
  }

  export type GetResumeSourceAggregateType<T extends ResumeSourceAggregateArgs> = {
        [P in keyof T & keyof AggregateResumeSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResumeSource[P]>
      : GetScalarType<T[P], AggregateResumeSource[P]>
  }




  export type ResumeSourceGroupByArgs = {
    where?: ResumeSourceWhereInput
    orderBy?: Enumerable<ResumeSourceOrderByWithAggregationInput>
    by: Array<ResumeSourceScalarFieldEnum>
    having?: ResumeSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeSourceCountAggregateInputType | true
    _min?: ResumeSourceMinAggregateInputType
    _max?: ResumeSourceMaxAggregateInputType
  }


  export type ResumeSourceGroupByOutputType = {
    id: string
    sourceName: string
    organisationId: string
    deleted: boolean
    createdAt: Date
    updatedAt: Date | null
    _count: ResumeSourceCountAggregateOutputType | null
    _min: ResumeSourceMinAggregateOutputType | null
    _max: ResumeSourceMaxAggregateOutputType | null
  }

  type GetResumeSourceGroupByPayload<T extends ResumeSourceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ResumeSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeSourceGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeSourceGroupByOutputType[P]>
        }
      >
    >


  export type ResumeSourceSelect = {
    id?: boolean
    sourceName?: boolean
    organisationId?: boolean
    organisation?: boolean | OrganisationArgs
    deleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResumeSourceInclude = {
    organisation?: boolean | OrganisationArgs
  }

  export type ResumeSourceGetPayload<
    S extends boolean | null | undefined | ResumeSourceArgs,
    U = keyof S
      > = S extends true
        ? ResumeSource
    : S extends undefined
    ? never
    : S extends ResumeSourceArgs | ResumeSourceFindManyArgs
    ?'include' extends U
    ? ResumeSource  & {
    [P in TrueKeys<S['include']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['select'][P]> :  P extends keyof ResumeSource ? ResumeSource[P] : never
  } 
    : ResumeSource
  : ResumeSource


  type ResumeSourceCountArgs = Merge<
    Omit<ResumeSourceFindManyArgs, 'select' | 'include'> & {
      select?: ResumeSourceCountAggregateInputType | true
    }
  >

  export interface ResumeSourceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ResumeSource that matches the filter.
     * @param {ResumeSourceFindUniqueArgs} args - Arguments to find a ResumeSource
     * @example
     * // Get one ResumeSource
     * const resumeSource = await prisma.resumeSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResumeSourceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ResumeSourceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ResumeSource'> extends True ? CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>> : CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource | null >, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T> | null >>

    /**
     * Find the first ResumeSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceFindFirstArgs} args - Arguments to find a ResumeSource
     * @example
     * // Get one ResumeSource
     * const resumeSource = await prisma.resumeSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResumeSourceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ResumeSourceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ResumeSource'> extends True ? CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>> : CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource | null >, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T> | null >>

    /**
     * Find zero or more ResumeSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResumeSources
     * const resumeSources = await prisma.resumeSource.findMany()
     * 
     * // Get first 10 ResumeSources
     * const resumeSources = await prisma.resumeSource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeSourceWithIdOnly = await prisma.resumeSource.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResumeSourceFindManyArgs>(
      args?: SelectSubset<T, ResumeSourceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ResumeSource>>, PrismaPromise<Array<ResumeSourceGetPayload<T>>>>

    /**
     * Create a ResumeSource.
     * @param {ResumeSourceCreateArgs} args - Arguments to create a ResumeSource.
     * @example
     * // Create one ResumeSource
     * const ResumeSource = await prisma.resumeSource.create({
     *   data: {
     *     // ... data to create a ResumeSource
     *   }
     * })
     * 
    **/
    create<T extends ResumeSourceCreateArgs>(
      args: SelectSubset<T, ResumeSourceCreateArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Create many ResumeSources.
     *     @param {ResumeSourceCreateManyArgs} args - Arguments to create many ResumeSources.
     *     @example
     *     // Create many ResumeSources
     *     const resumeSource = await prisma.resumeSource.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResumeSourceCreateManyArgs>(
      args?: SelectSubset<T, ResumeSourceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ResumeSource.
     * @param {ResumeSourceDeleteArgs} args - Arguments to delete one ResumeSource.
     * @example
     * // Delete one ResumeSource
     * const ResumeSource = await prisma.resumeSource.delete({
     *   where: {
     *     // ... filter to delete one ResumeSource
     *   }
     * })
     * 
    **/
    delete<T extends ResumeSourceDeleteArgs>(
      args: SelectSubset<T, ResumeSourceDeleteArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Update one ResumeSource.
     * @param {ResumeSourceUpdateArgs} args - Arguments to update one ResumeSource.
     * @example
     * // Update one ResumeSource
     * const resumeSource = await prisma.resumeSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResumeSourceUpdateArgs>(
      args: SelectSubset<T, ResumeSourceUpdateArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Delete zero or more ResumeSources.
     * @param {ResumeSourceDeleteManyArgs} args - Arguments to filter ResumeSources to delete.
     * @example
     * // Delete a few ResumeSources
     * const { count } = await prisma.resumeSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResumeSourceDeleteManyArgs>(
      args?: SelectSubset<T, ResumeSourceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResumeSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResumeSources
     * const resumeSource = await prisma.resumeSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResumeSourceUpdateManyArgs>(
      args: SelectSubset<T, ResumeSourceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ResumeSource.
     * @param {ResumeSourceUpsertArgs} args - Arguments to update or create a ResumeSource.
     * @example
     * // Update or create a ResumeSource
     * const resumeSource = await prisma.resumeSource.upsert({
     *   create: {
     *     // ... data to create a ResumeSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResumeSource we want to update
     *   }
     * })
    **/
    upsert<T extends ResumeSourceUpsertArgs>(
      args: SelectSubset<T, ResumeSourceUpsertArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Find one ResumeSource that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ResumeSourceFindUniqueOrThrowArgs} args - Arguments to find a ResumeSource
     * @example
     * // Get one ResumeSource
     * const resumeSource = await prisma.resumeSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResumeSourceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ResumeSourceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Find the first ResumeSource that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceFindFirstOrThrowArgs} args - Arguments to find a ResumeSource
     * @example
     * // Get one ResumeSource
     * const resumeSource = await prisma.resumeSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResumeSourceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ResumeSourceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ResumeSourceClient<ResumeSource>, Prisma__ResumeSourceClient<ResumeSourceGetPayload<T>>>

    /**
     * Count the number of ResumeSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceCountArgs} args - Arguments to filter ResumeSources to count.
     * @example
     * // Count the number of ResumeSources
     * const count = await prisma.resumeSource.count({
     *   where: {
     *     // ... the filter for the ResumeSources we want to count
     *   }
     * })
    **/
    count<T extends ResumeSourceCountArgs>(
      args?: Subset<T, ResumeSourceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResumeSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeSourceAggregateArgs>(args: Subset<T, ResumeSourceAggregateArgs>): PrismaPromise<GetResumeSourceAggregateType<T>>

    /**
     * Group by ResumeSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeSourceGroupByArgs['orderBy'] }
        : { orderBy?: ResumeSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeSourceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResumeSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ResumeSourceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organisation<T extends OrganisationArgs = {}>(args?: Subset<T, OrganisationArgs>): CheckSelect<T, Prisma__OrganisationClient<Organisation | null >, Prisma__OrganisationClient<OrganisationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ResumeSource base type for findUnique actions
   */
  export type ResumeSourceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * Filter, which ResumeSource to fetch.
     * 
    **/
    where: ResumeSourceWhereUniqueInput
  }

  /**
   * ResumeSource: findUnique
   */
  export interface ResumeSourceFindUniqueArgs extends ResumeSourceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResumeSource base type for findFirst actions
   */
  export type ResumeSourceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * Filter, which ResumeSource to fetch.
     * 
    **/
    where?: ResumeSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeSources to fetch.
     * 
    **/
    orderBy?: Enumerable<ResumeSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResumeSources.
     * 
    **/
    cursor?: ResumeSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeSources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeSources.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResumeSources.
     * 
    **/
    distinct?: Enumerable<ResumeSourceScalarFieldEnum>
  }

  /**
   * ResumeSource: findFirst
   */
  export interface ResumeSourceFindFirstArgs extends ResumeSourceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ResumeSource findMany
   */
  export type ResumeSourceFindManyArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * Filter, which ResumeSources to fetch.
     * 
    **/
    where?: ResumeSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResumeSources to fetch.
     * 
    **/
    orderBy?: Enumerable<ResumeSourceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResumeSources.
     * 
    **/
    cursor?: ResumeSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResumeSources from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResumeSources.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ResumeSourceScalarFieldEnum>
  }


  /**
   * ResumeSource create
   */
  export type ResumeSourceCreateArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * The data needed to create a ResumeSource.
     * 
    **/
    data: XOR<ResumeSourceCreateInput, ResumeSourceUncheckedCreateInput>
  }


  /**
   * ResumeSource createMany
   */
  export type ResumeSourceCreateManyArgs = {
    /**
     * The data used to create many ResumeSources.
     * 
    **/
    data: Enumerable<ResumeSourceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ResumeSource update
   */
  export type ResumeSourceUpdateArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * The data needed to update a ResumeSource.
     * 
    **/
    data: XOR<ResumeSourceUpdateInput, ResumeSourceUncheckedUpdateInput>
    /**
     * Choose, which ResumeSource to update.
     * 
    **/
    where: ResumeSourceWhereUniqueInput
  }


  /**
   * ResumeSource updateMany
   */
  export type ResumeSourceUpdateManyArgs = {
    /**
     * The data used to update ResumeSources.
     * 
    **/
    data: XOR<ResumeSourceUpdateManyMutationInput, ResumeSourceUncheckedUpdateManyInput>
    /**
     * Filter which ResumeSources to update
     * 
    **/
    where?: ResumeSourceWhereInput
  }


  /**
   * ResumeSource upsert
   */
  export type ResumeSourceUpsertArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * The filter to search for the ResumeSource to update in case it exists.
     * 
    **/
    where: ResumeSourceWhereUniqueInput
    /**
     * In case the ResumeSource found by the `where` argument doesn't exist, create a new ResumeSource with this data.
     * 
    **/
    create: XOR<ResumeSourceCreateInput, ResumeSourceUncheckedCreateInput>
    /**
     * In case the ResumeSource was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ResumeSourceUpdateInput, ResumeSourceUncheckedUpdateInput>
  }


  /**
   * ResumeSource delete
   */
  export type ResumeSourceDeleteArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
    /**
     * Filter which ResumeSource to delete.
     * 
    **/
    where: ResumeSourceWhereUniqueInput
  }


  /**
   * ResumeSource deleteMany
   */
  export type ResumeSourceDeleteManyArgs = {
    /**
     * Filter which ResumeSources to delete
     * 
    **/
    where?: ResumeSourceWhereInput
  }


  /**
   * ResumeSource: findUniqueOrThrow
   */
  export type ResumeSourceFindUniqueOrThrowArgs = ResumeSourceFindUniqueArgsBase
      

  /**
   * ResumeSource: findFirstOrThrow
   */
  export type ResumeSourceFindFirstOrThrowArgs = ResumeSourceFindFirstArgsBase
      

  /**
   * ResumeSource without action
   */
  export type ResumeSourceArgs = {
    /**
     * Select specific fields to fetch from the ResumeSource
     * 
    **/
    select?: ResumeSourceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ResumeSourceInclude | null
  }



  /**
   * Model Skill
   */


  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillMinAggregateOutputType = {
    id: string | null
    skillName: string | null
    organisationId: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMaxAggregateOutputType = {
    id: string | null
    skillName: string | null
    organisationId: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    skillName: number
    organisationId: number
    deleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkillMinAggregateInputType = {
    id?: true
    skillName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    skillName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    skillName?: true
    organisationId?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkillAggregateArgs = {
    /**
     * Filter which Skill to aggregate.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs = {
    where?: SkillWhereInput
    orderBy?: Enumerable<SkillOrderByWithAggregationInput>
    by: Array<SkillScalarFieldEnum>
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }


  export type SkillGroupByOutputType = {
    id: string
    skillName: string
    organisationId: string
    deleted: boolean
    createdAt: Date
    updatedAt: Date | null
    _count: SkillCountAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect = {
    id?: boolean
    skillName?: boolean
    organisationId?: boolean
    organisation?: boolean | OrganisationArgs
    deleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkillInclude = {
    organisation?: boolean | OrganisationArgs
  }

  export type SkillGetPayload<
    S extends boolean | null | undefined | SkillArgs,
    U = keyof S
      > = S extends true
        ? Skill
    : S extends undefined
    ? never
    : S extends SkillArgs | SkillFindManyArgs
    ?'include' extends U
    ? Skill  & {
    [P in TrueKeys<S['include']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'organisation' ? OrganisationGetPayload<S['select'][P]> :  P extends keyof Skill ? Skill[P] : never
  } 
    : Skill
  : Skill


  type SkillCountArgs = Merge<
    Omit<SkillFindManyArgs, 'select' | 'include'> & {
      select?: SkillCountAggregateInputType | true
    }
  >

  export interface SkillDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skill'> extends True ? CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>> : CheckSelect<T, Prisma__SkillClient<Skill | null >, Prisma__SkillClient<SkillGetPayload<T> | null >>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skill'> extends True ? CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>> : CheckSelect<T, Prisma__SkillClient<Skill | null >, Prisma__SkillClient<SkillGetPayload<T> | null >>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillFindManyArgs>(
      args?: SelectSubset<T, SkillFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Skill>>, PrismaPromise<Array<SkillGetPayload<T>>>>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
    **/
    create<T extends SkillCreateArgs>(
      args: SelectSubset<T, SkillCreateArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Create many Skills.
     *     @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skill = await prisma.skill.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillCreateManyArgs>(
      args?: SelectSubset<T, SkillCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
    **/
    delete<T extends SkillDeleteArgs>(
      args: SelectSubset<T, SkillDeleteArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillUpdateArgs>(
      args: SelectSubset<T, SkillUpdateArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillDeleteManyArgs>(
      args?: SelectSubset<T, SkillDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillUpdateManyArgs>(
      args: SelectSubset<T, SkillUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
    **/
    upsert<T extends SkillUpsertArgs>(
      args: SelectSubset<T, SkillUpsertArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Find one Skill that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SkillFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Find the first Skill that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SkillFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SkillClient<Skill>, Prisma__SkillClient<SkillGetPayload<T>>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organisation<T extends OrganisationArgs = {}>(args?: Subset<T, OrganisationArgs>): CheckSelect<T, Prisma__OrganisationClient<Organisation | null >, Prisma__OrganisationClient<OrganisationGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Skill base type for findUnique actions
   */
  export type SkillFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     * 
    **/
    where: SkillWhereUniqueInput
  }

  /**
   * Skill: findUnique
   */
  export interface SkillFindUniqueArgs extends SkillFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skill base type for findFirst actions
   */
  export type SkillFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter, which Skill to fetch.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     * 
    **/
    distinct?: Enumerable<SkillScalarFieldEnum>
  }

  /**
   * Skill: findFirst
   */
  export interface SkillFindFirstArgs extends SkillFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     * 
    **/
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SkillScalarFieldEnum>
  }


  /**
   * Skill create
   */
  export type SkillCreateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The data needed to create a Skill.
     * 
    **/
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }


  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs = {
    /**
     * The data used to create many Skills.
     * 
    **/
    data: Enumerable<SkillCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skill update
   */
  export type SkillUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The data needed to update a Skill.
     * 
    **/
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     * 
    **/
    where: SkillWhereUniqueInput
  }


  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs = {
    /**
     * The data used to update Skills.
     * 
    **/
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     * 
    **/
    where?: SkillWhereInput
  }


  /**
   * Skill upsert
   */
  export type SkillUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * The filter to search for the Skill to update in case it exists.
     * 
    **/
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     * 
    **/
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }


  /**
   * Skill delete
   */
  export type SkillDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
    /**
     * Filter which Skill to delete.
     * 
    **/
    where: SkillWhereUniqueInput
  }


  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs = {
    /**
     * Filter which Skills to delete
     * 
    **/
    where?: SkillWhereInput
  }


  /**
   * Skill: findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs = SkillFindUniqueArgsBase
      

  /**
   * Skill: findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs = SkillFindFirstArgsBase
      

  /**
   * Skill without action
   */
  export type SkillArgs = {
    /**
     * Select specific fields to fetch from the Skill
     * 
    **/
    select?: SkillSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillInclude | null
  }



  /**
   * Model Organisation
   */


  export type AggregateOrganisation = {
    _count: OrganisationCountAggregateOutputType | null
    _min: OrganisationMinAggregateOutputType | null
    _max: OrganisationMaxAggregateOutputType | null
  }

  export type OrganisationMinAggregateOutputType = {
    id: string | null
    companyName: string | null
    companyDescription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganisationMaxAggregateOutputType = {
    id: string | null
    companyName: string | null
    companyDescription: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrganisationCountAggregateOutputType = {
    id: number
    companyName: number
    companyDescription: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrganisationMinAggregateInputType = {
    id?: true
    companyName?: true
    companyDescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganisationMaxAggregateInputType = {
    id?: true
    companyName?: true
    companyDescription?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrganisationCountAggregateInputType = {
    id?: true
    companyName?: true
    companyDescription?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrganisationAggregateArgs = {
    /**
     * Filter which Organisation to aggregate.
     * 
    **/
    where?: OrganisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organisations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganisationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OrganisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organisations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organisations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organisations
    **/
    _count?: true | OrganisationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganisationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganisationMaxAggregateInputType
  }

  export type GetOrganisationAggregateType<T extends OrganisationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganisation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganisation[P]>
      : GetScalarType<T[P], AggregateOrganisation[P]>
  }




  export type OrganisationGroupByArgs = {
    where?: OrganisationWhereInput
    orderBy?: Enumerable<OrganisationOrderByWithAggregationInput>
    by: Array<OrganisationScalarFieldEnum>
    having?: OrganisationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganisationCountAggregateInputType | true
    _min?: OrganisationMinAggregateInputType
    _max?: OrganisationMaxAggregateInputType
  }


  export type OrganisationGroupByOutputType = {
    id: string
    companyName: string
    companyDescription: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: OrganisationCountAggregateOutputType | null
    _min: OrganisationMinAggregateOutputType | null
    _max: OrganisationMaxAggregateOutputType | null
  }

  type GetOrganisationGroupByPayload<T extends OrganisationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OrganisationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganisationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganisationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganisationGroupByOutputType[P]>
        }
      >
    >


  export type OrganisationSelect = {
    id?: boolean
    companyName?: boolean
    companyDescription?: boolean
    users?: boolean | UserFindManyArgs
    resumeSources?: boolean | ResumeSourceFindManyArgs
    skills?: boolean | SkillFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | OrganisationCountOutputTypeArgs
  }

  export type OrganisationInclude = {
    users?: boolean | UserFindManyArgs
    resumeSources?: boolean | ResumeSourceFindManyArgs
    skills?: boolean | SkillFindManyArgs
    _count?: boolean | OrganisationCountOutputTypeArgs
  }

  export type OrganisationGetPayload<
    S extends boolean | null | undefined | OrganisationArgs,
    U = keyof S
      > = S extends true
        ? Organisation
    : S extends undefined
    ? never
    : S extends OrganisationArgs | OrganisationFindManyArgs
    ?'include' extends U
    ? Organisation  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'resumeSources' ? Array < ResumeSourceGetPayload<S['include'][P]>>  :
        P extends 'skills' ? Array < SkillGetPayload<S['include'][P]>>  :
        P extends '_count' ? OrganisationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'resumeSources' ? Array < ResumeSourceGetPayload<S['select'][P]>>  :
        P extends 'skills' ? Array < SkillGetPayload<S['select'][P]>>  :
        P extends '_count' ? OrganisationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Organisation ? Organisation[P] : never
  } 
    : Organisation
  : Organisation


  type OrganisationCountArgs = Merge<
    Omit<OrganisationFindManyArgs, 'select' | 'include'> & {
      select?: OrganisationCountAggregateInputType | true
    }
  >

  export interface OrganisationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Organisation that matches the filter.
     * @param {OrganisationFindUniqueArgs} args - Arguments to find a Organisation
     * @example
     * // Get one Organisation
     * const organisation = await prisma.organisation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganisationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganisationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organisation'> extends True ? CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>> : CheckSelect<T, Prisma__OrganisationClient<Organisation | null >, Prisma__OrganisationClient<OrganisationGetPayload<T> | null >>

    /**
     * Find the first Organisation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationFindFirstArgs} args - Arguments to find a Organisation
     * @example
     * // Get one Organisation
     * const organisation = await prisma.organisation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganisationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganisationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organisation'> extends True ? CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>> : CheckSelect<T, Prisma__OrganisationClient<Organisation | null >, Prisma__OrganisationClient<OrganisationGetPayload<T> | null >>

    /**
     * Find zero or more Organisations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organisations
     * const organisations = await prisma.organisation.findMany()
     * 
     * // Get first 10 Organisations
     * const organisations = await prisma.organisation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organisationWithIdOnly = await prisma.organisation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganisationFindManyArgs>(
      args?: SelectSubset<T, OrganisationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Organisation>>, PrismaPromise<Array<OrganisationGetPayload<T>>>>

    /**
     * Create a Organisation.
     * @param {OrganisationCreateArgs} args - Arguments to create a Organisation.
     * @example
     * // Create one Organisation
     * const Organisation = await prisma.organisation.create({
     *   data: {
     *     // ... data to create a Organisation
     *   }
     * })
     * 
    **/
    create<T extends OrganisationCreateArgs>(
      args: SelectSubset<T, OrganisationCreateArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Create many Organisations.
     *     @param {OrganisationCreateManyArgs} args - Arguments to create many Organisations.
     *     @example
     *     // Create many Organisations
     *     const organisation = await prisma.organisation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganisationCreateManyArgs>(
      args?: SelectSubset<T, OrganisationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Organisation.
     * @param {OrganisationDeleteArgs} args - Arguments to delete one Organisation.
     * @example
     * // Delete one Organisation
     * const Organisation = await prisma.organisation.delete({
     *   where: {
     *     // ... filter to delete one Organisation
     *   }
     * })
     * 
    **/
    delete<T extends OrganisationDeleteArgs>(
      args: SelectSubset<T, OrganisationDeleteArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Update one Organisation.
     * @param {OrganisationUpdateArgs} args - Arguments to update one Organisation.
     * @example
     * // Update one Organisation
     * const organisation = await prisma.organisation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganisationUpdateArgs>(
      args: SelectSubset<T, OrganisationUpdateArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Delete zero or more Organisations.
     * @param {OrganisationDeleteManyArgs} args - Arguments to filter Organisations to delete.
     * @example
     * // Delete a few Organisations
     * const { count } = await prisma.organisation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganisationDeleteManyArgs>(
      args?: SelectSubset<T, OrganisationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organisations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organisations
     * const organisation = await prisma.organisation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganisationUpdateManyArgs>(
      args: SelectSubset<T, OrganisationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Organisation.
     * @param {OrganisationUpsertArgs} args - Arguments to update or create a Organisation.
     * @example
     * // Update or create a Organisation
     * const organisation = await prisma.organisation.upsert({
     *   create: {
     *     // ... data to create a Organisation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organisation we want to update
     *   }
     * })
    **/
    upsert<T extends OrganisationUpsertArgs>(
      args: SelectSubset<T, OrganisationUpsertArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Find one Organisation that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {OrganisationFindUniqueOrThrowArgs} args - Arguments to find a Organisation
     * @example
     * // Get one Organisation
     * const organisation = await prisma.organisation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganisationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OrganisationFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Find the first Organisation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationFindFirstOrThrowArgs} args - Arguments to find a Organisation
     * @example
     * // Get one Organisation
     * const organisation = await prisma.organisation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganisationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OrganisationFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__OrganisationClient<Organisation>, Prisma__OrganisationClient<OrganisationGetPayload<T>>>

    /**
     * Count the number of Organisations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationCountArgs} args - Arguments to filter Organisations to count.
     * @example
     * // Count the number of Organisations
     * const count = await prisma.organisation.count({
     *   where: {
     *     // ... the filter for the Organisations we want to count
     *   }
     * })
    **/
    count<T extends OrganisationCountArgs>(
      args?: Subset<T, OrganisationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganisationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organisation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganisationAggregateArgs>(args: Subset<T, OrganisationAggregateArgs>): PrismaPromise<GetOrganisationAggregateType<T>>

    /**
     * Group by Organisation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganisationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganisationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganisationGroupByArgs['orderBy'] }
        : { orderBy?: OrganisationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganisationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganisationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organisation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganisationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    resumeSources<T extends ResumeSourceFindManyArgs = {}>(args?: Subset<T, ResumeSourceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ResumeSource>>, PrismaPromise<Array<ResumeSourceGetPayload<T>>>>;

    skills<T extends SkillFindManyArgs = {}>(args?: Subset<T, SkillFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Skill>>, PrismaPromise<Array<SkillGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Organisation base type for findUnique actions
   */
  export type OrganisationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * Filter, which Organisation to fetch.
     * 
    **/
    where: OrganisationWhereUniqueInput
  }

  /**
   * Organisation: findUnique
   */
  export interface OrganisationFindUniqueArgs extends OrganisationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organisation base type for findFirst actions
   */
  export type OrganisationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * Filter, which Organisation to fetch.
     * 
    **/
    where?: OrganisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organisations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganisationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organisations.
     * 
    **/
    cursor?: OrganisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organisations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organisations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organisations.
     * 
    **/
    distinct?: Enumerable<OrganisationScalarFieldEnum>
  }

  /**
   * Organisation: findFirst
   */
  export interface OrganisationFindFirstArgs extends OrganisationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organisation findMany
   */
  export type OrganisationFindManyArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * Filter, which Organisations to fetch.
     * 
    **/
    where?: OrganisationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organisations to fetch.
     * 
    **/
    orderBy?: Enumerable<OrganisationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organisations.
     * 
    **/
    cursor?: OrganisationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organisations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organisations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OrganisationScalarFieldEnum>
  }


  /**
   * Organisation create
   */
  export type OrganisationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * The data needed to create a Organisation.
     * 
    **/
    data: XOR<OrganisationCreateInput, OrganisationUncheckedCreateInput>
  }


  /**
   * Organisation createMany
   */
  export type OrganisationCreateManyArgs = {
    /**
     * The data used to create many Organisations.
     * 
    **/
    data: Enumerable<OrganisationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organisation update
   */
  export type OrganisationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * The data needed to update a Organisation.
     * 
    **/
    data: XOR<OrganisationUpdateInput, OrganisationUncheckedUpdateInput>
    /**
     * Choose, which Organisation to update.
     * 
    **/
    where: OrganisationWhereUniqueInput
  }


  /**
   * Organisation updateMany
   */
  export type OrganisationUpdateManyArgs = {
    /**
     * The data used to update Organisations.
     * 
    **/
    data: XOR<OrganisationUpdateManyMutationInput, OrganisationUncheckedUpdateManyInput>
    /**
     * Filter which Organisations to update
     * 
    **/
    where?: OrganisationWhereInput
  }


  /**
   * Organisation upsert
   */
  export type OrganisationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * The filter to search for the Organisation to update in case it exists.
     * 
    **/
    where: OrganisationWhereUniqueInput
    /**
     * In case the Organisation found by the `where` argument doesn't exist, create a new Organisation with this data.
     * 
    **/
    create: XOR<OrganisationCreateInput, OrganisationUncheckedCreateInput>
    /**
     * In case the Organisation was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OrganisationUpdateInput, OrganisationUncheckedUpdateInput>
  }


  /**
   * Organisation delete
   */
  export type OrganisationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
    /**
     * Filter which Organisation to delete.
     * 
    **/
    where: OrganisationWhereUniqueInput
  }


  /**
   * Organisation deleteMany
   */
  export type OrganisationDeleteManyArgs = {
    /**
     * Filter which Organisations to delete
     * 
    **/
    where?: OrganisationWhereInput
  }


  /**
   * Organisation: findUniqueOrThrow
   */
  export type OrganisationFindUniqueOrThrowArgs = OrganisationFindUniqueArgsBase
      

  /**
   * Organisation: findFirstOrThrow
   */
  export type OrganisationFindFirstOrThrowArgs = OrganisationFindFirstArgsBase
      

  /**
   * Organisation without action
   */
  export type OrganisationArgs = {
    /**
     * Select specific fields to fetch from the Organisation
     * 
    **/
    select?: OrganisationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OrganisationInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const OrganisationScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    companyDescription: 'companyDescription',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrganisationScalarFieldEnum = (typeof OrganisationScalarFieldEnum)[keyof typeof OrganisationScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ResumeSourceScalarFieldEnum: {
    id: 'id',
    sourceName: 'sourceName',
    organisationId: 'organisationId',
    deleted: 'deleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResumeSourceScalarFieldEnum = (typeof ResumeSourceScalarFieldEnum)[keyof typeof ResumeSourceScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    skillName: 'skillName',
    organisationId: 'organisationId',
    deleted: 'deleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    profilePicture: 'profilePicture',
    role: 'role',
    status: 'status',
    loginAccess: 'loginAccess',
    organisationId: 'organisationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    profilePicture?: StringNullableFilter | string | null
    role?: EnumRoleTypeFilter | RoleType
    status?: EnumUserStatusFilter | UserStatus
    loginAccess?: BoolFilter | boolean
    organisationId?: StringFilter | string
    organisation?: XOR<OrganisationRelationFilter, OrganisationWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profilePicture?: SortOrder
    role?: SortOrder
    status?: SortOrder
    loginAccess?: SortOrder
    organisationId?: SortOrder
    organisation?: OrganisationOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profilePicture?: SortOrder
    role?: SortOrder
    status?: SortOrder
    loginAccess?: SortOrder
    organisationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    profilePicture?: StringNullableWithAggregatesFilter | string | null
    role?: EnumRoleTypeWithAggregatesFilter | RoleType
    status?: EnumUserStatusWithAggregatesFilter | UserStatus
    loginAccess?: BoolWithAggregatesFilter | boolean
    organisationId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ResumeSourceWhereInput = {
    AND?: Enumerable<ResumeSourceWhereInput>
    OR?: Enumerable<ResumeSourceWhereInput>
    NOT?: Enumerable<ResumeSourceWhereInput>
    id?: StringFilter | string
    sourceName?: StringFilter | string
    organisationId?: StringFilter | string
    organisation?: XOR<OrganisationRelationFilter, OrganisationWhereInput>
    deleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type ResumeSourceOrderByWithRelationInput = {
    id?: SortOrder
    sourceName?: SortOrder
    organisationId?: SortOrder
    organisation?: OrganisationOrderByWithRelationInput
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeSourceWhereUniqueInput = {
    id?: string
  }

  export type ResumeSourceOrderByWithAggregationInput = {
    id?: SortOrder
    sourceName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResumeSourceCountOrderByAggregateInput
    _max?: ResumeSourceMaxOrderByAggregateInput
    _min?: ResumeSourceMinOrderByAggregateInput
  }

  export type ResumeSourceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ResumeSourceScalarWhereWithAggregatesInput>
    OR?: Enumerable<ResumeSourceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ResumeSourceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sourceName?: StringWithAggregatesFilter | string
    organisationId?: StringWithAggregatesFilter | string
    deleted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type SkillWhereInput = {
    AND?: Enumerable<SkillWhereInput>
    OR?: Enumerable<SkillWhereInput>
    NOT?: Enumerable<SkillWhereInput>
    id?: StringFilter | string
    skillName?: StringFilter | string
    organisationId?: StringFilter | string
    organisation?: XOR<OrganisationRelationFilter, OrganisationWhereInput>
    deleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    skillName?: SortOrder
    organisationId?: SortOrder
    organisation?: OrganisationOrderByWithRelationInput
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillWhereUniqueInput = {
    id?: string
  }

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    skillName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    skillName?: StringWithAggregatesFilter | string
    organisationId?: StringWithAggregatesFilter | string
    deleted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type OrganisationWhereInput = {
    AND?: Enumerable<OrganisationWhereInput>
    OR?: Enumerable<OrganisationWhereInput>
    NOT?: Enumerable<OrganisationWhereInput>
    id?: StringFilter | string
    companyName?: StringFilter | string
    companyDescription?: StringNullableFilter | string | null
    users?: UserListRelationFilter
    resumeSources?: ResumeSourceListRelationFilter
    skills?: SkillListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type OrganisationOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    companyDescription?: SortOrder
    users?: UserOrderByRelationAggregateInput
    resumeSources?: ResumeSourceOrderByRelationAggregateInput
    skills?: SkillOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganisationWhereUniqueInput = {
    id?: string
  }

  export type OrganisationOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    companyDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrganisationCountOrderByAggregateInput
    _max?: OrganisationMaxOrderByAggregateInput
    _min?: OrganisationMinOrderByAggregateInput
  }

  export type OrganisationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganisationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganisationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganisationScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    companyName?: StringWithAggregatesFilter | string
    companyDescription?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    organisation: OrganisationCreateNestedOneWithoutUsersInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    organisationId: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    organisation?: OrganisationUpdateOneRequiredWithoutUsersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    organisationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    organisationId: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    organisationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceCreateInput = {
    id?: string
    sourceName: string
    organisation: OrganisationCreateNestedOneWithoutResumeSourcesInput
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceUncheckedCreateInput = {
    id?: string
    sourceName: string
    organisationId: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    organisation?: OrganisationUpdateOneRequiredWithoutResumeSourcesNestedInput
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    organisationId?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceCreateManyInput = {
    id?: string
    sourceName: string
    organisationId: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    organisationId?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillCreateInput = {
    id?: string
    skillName: string
    organisation: OrganisationCreateNestedOneWithoutSkillsInput
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillUncheckedCreateInput = {
    id?: string
    skillName: string
    organisationId: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    organisation?: OrganisationUpdateOneRequiredWithoutSkillsNestedInput
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    organisationId?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillCreateManyInput = {
    id?: string
    skillName: string
    organisationId: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    organisationId?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationCreateInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserCreateNestedManyWithoutOrganisationInput
    resumeSources?: ResumeSourceCreateNestedManyWithoutOrganisationInput
    skills?: SkillCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUncheckedCreateInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserUncheckedCreateNestedManyWithoutOrganisationInput
    resumeSources?: ResumeSourceUncheckedCreateNestedManyWithoutOrganisationInput
    skills?: SkillUncheckedCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganisationNestedInput
    resumeSources?: ResumeSourceUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutOrganisationNestedInput
    resumeSources?: ResumeSourceUncheckedUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUncheckedUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationCreateManyInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type EnumRoleTypeFilter = {
    equals?: RoleType
    in?: Enumerable<RoleType>
    notIn?: Enumerable<RoleType>
    not?: NestedEnumRoleTypeFilter | RoleType
  }

  export type EnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type OrganisationRelationFilter = {
    is?: OrganisationWhereInput
    isNot?: OrganisationWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profilePicture?: SortOrder
    role?: SortOrder
    status?: SortOrder
    loginAccess?: SortOrder
    organisationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profilePicture?: SortOrder
    role?: SortOrder
    status?: SortOrder
    loginAccess?: SortOrder
    organisationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    profilePicture?: SortOrder
    role?: SortOrder
    status?: SortOrder
    loginAccess?: SortOrder
    organisationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumRoleTypeWithAggregatesFilter = {
    equals?: RoleType
    in?: Enumerable<RoleType>
    notIn?: Enumerable<RoleType>
    not?: NestedEnumRoleTypeWithAggregatesFilter | RoleType
    _count?: NestedIntFilter
    _min?: NestedEnumRoleTypeFilter
    _max?: NestedEnumRoleTypeFilter
  }

  export type EnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type ResumeSourceCountOrderByAggregateInput = {
    id?: SortOrder
    sourceName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeSourceMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResumeSourceMinOrderByAggregateInput = {
    id?: SortOrder
    sourceName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    skillName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    skillName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    skillName?: SortOrder
    organisationId?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type ResumeSourceListRelationFilter = {
    every?: ResumeSourceWhereInput
    some?: ResumeSourceWhereInput
    none?: ResumeSourceWhereInput
  }

  export type SkillListRelationFilter = {
    every?: SkillWhereInput
    some?: SkillWhereInput
    none?: SkillWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResumeSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganisationCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    companyDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganisationMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    companyDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganisationMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    companyDescription?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrganisationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganisationCreateWithoutUsersInput, OrganisationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutUsersInput
    connect?: OrganisationWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleTypeFieldUpdateOperationsInput = {
    set?: RoleType
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: UserStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OrganisationUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<OrganisationCreateWithoutUsersInput, OrganisationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutUsersInput
    upsert?: OrganisationUpsertWithoutUsersInput
    connect?: OrganisationWhereUniqueInput
    update?: XOR<OrganisationUpdateWithoutUsersInput, OrganisationUncheckedUpdateWithoutUsersInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type OrganisationCreateNestedOneWithoutResumeSourcesInput = {
    create?: XOR<OrganisationCreateWithoutResumeSourcesInput, OrganisationUncheckedCreateWithoutResumeSourcesInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutResumeSourcesInput
    connect?: OrganisationWhereUniqueInput
  }

  export type OrganisationUpdateOneRequiredWithoutResumeSourcesNestedInput = {
    create?: XOR<OrganisationCreateWithoutResumeSourcesInput, OrganisationUncheckedCreateWithoutResumeSourcesInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutResumeSourcesInput
    upsert?: OrganisationUpsertWithoutResumeSourcesInput
    connect?: OrganisationWhereUniqueInput
    update?: XOR<OrganisationUpdateWithoutResumeSourcesInput, OrganisationUncheckedUpdateWithoutResumeSourcesInput>
  }

  export type OrganisationCreateNestedOneWithoutSkillsInput = {
    create?: XOR<OrganisationCreateWithoutSkillsInput, OrganisationUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutSkillsInput
    connect?: OrganisationWhereUniqueInput
  }

  export type OrganisationUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<OrganisationCreateWithoutSkillsInput, OrganisationUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: OrganisationCreateOrConnectWithoutSkillsInput
    upsert?: OrganisationUpsertWithoutSkillsInput
    connect?: OrganisationWhereUniqueInput
    update?: XOR<OrganisationUpdateWithoutSkillsInput, OrganisationUncheckedUpdateWithoutSkillsInput>
  }

  export type UserCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganisationInput>, Enumerable<UserUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganisationInput>
    createMany?: UserCreateManyOrganisationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ResumeSourceCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<ResumeSourceCreateWithoutOrganisationInput>, Enumerable<ResumeSourceUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<ResumeSourceCreateOrConnectWithoutOrganisationInput>
    createMany?: ResumeSourceCreateManyOrganisationInputEnvelope
    connect?: Enumerable<ResumeSourceWhereUniqueInput>
  }

  export type SkillCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<SkillCreateWithoutOrganisationInput>, Enumerable<SkillUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutOrganisationInput>
    createMany?: SkillCreateManyOrganisationInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganisationInput>, Enumerable<UserUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganisationInput>
    createMany?: UserCreateManyOrganisationInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type ResumeSourceUncheckedCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<ResumeSourceCreateWithoutOrganisationInput>, Enumerable<ResumeSourceUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<ResumeSourceCreateOrConnectWithoutOrganisationInput>
    createMany?: ResumeSourceCreateManyOrganisationInputEnvelope
    connect?: Enumerable<ResumeSourceWhereUniqueInput>
  }

  export type SkillUncheckedCreateNestedManyWithoutOrganisationInput = {
    create?: XOR<Enumerable<SkillCreateWithoutOrganisationInput>, Enumerable<SkillUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutOrganisationInput>
    createMany?: SkillCreateManyOrganisationInputEnvelope
    connect?: Enumerable<SkillWhereUniqueInput>
  }

  export type UserUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganisationInput>, Enumerable<UserUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: UserCreateManyOrganisationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ResumeSourceUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<ResumeSourceCreateWithoutOrganisationInput>, Enumerable<ResumeSourceUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<ResumeSourceCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<ResumeSourceUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: ResumeSourceCreateManyOrganisationInputEnvelope
    set?: Enumerable<ResumeSourceWhereUniqueInput>
    disconnect?: Enumerable<ResumeSourceWhereUniqueInput>
    delete?: Enumerable<ResumeSourceWhereUniqueInput>
    connect?: Enumerable<ResumeSourceWhereUniqueInput>
    update?: Enumerable<ResumeSourceUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<ResumeSourceUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<ResumeSourceScalarWhereInput>
  }

  export type SkillUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutOrganisationInput>, Enumerable<SkillUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: SkillCreateManyOrganisationInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutOrganisationInput>, Enumerable<UserUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: UserCreateManyOrganisationInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type ResumeSourceUncheckedUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<ResumeSourceCreateWithoutOrganisationInput>, Enumerable<ResumeSourceUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<ResumeSourceCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<ResumeSourceUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: ResumeSourceCreateManyOrganisationInputEnvelope
    set?: Enumerable<ResumeSourceWhereUniqueInput>
    disconnect?: Enumerable<ResumeSourceWhereUniqueInput>
    delete?: Enumerable<ResumeSourceWhereUniqueInput>
    connect?: Enumerable<ResumeSourceWhereUniqueInput>
    update?: Enumerable<ResumeSourceUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<ResumeSourceUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<ResumeSourceScalarWhereInput>
  }

  export type SkillUncheckedUpdateManyWithoutOrganisationNestedInput = {
    create?: XOR<Enumerable<SkillCreateWithoutOrganisationInput>, Enumerable<SkillUncheckedCreateWithoutOrganisationInput>>
    connectOrCreate?: Enumerable<SkillCreateOrConnectWithoutOrganisationInput>
    upsert?: Enumerable<SkillUpsertWithWhereUniqueWithoutOrganisationInput>
    createMany?: SkillCreateManyOrganisationInputEnvelope
    set?: Enumerable<SkillWhereUniqueInput>
    disconnect?: Enumerable<SkillWhereUniqueInput>
    delete?: Enumerable<SkillWhereUniqueInput>
    connect?: Enumerable<SkillWhereUniqueInput>
    update?: Enumerable<SkillUpdateWithWhereUniqueWithoutOrganisationInput>
    updateMany?: Enumerable<SkillUpdateManyWithWhereWithoutOrganisationInput>
    deleteMany?: Enumerable<SkillScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumRoleTypeFilter = {
    equals?: RoleType
    in?: Enumerable<RoleType>
    notIn?: Enumerable<RoleType>
    not?: NestedEnumRoleTypeFilter | RoleType
  }

  export type NestedEnumUserStatusFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusFilter | UserStatus
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumRoleTypeWithAggregatesFilter = {
    equals?: RoleType
    in?: Enumerable<RoleType>
    notIn?: Enumerable<RoleType>
    not?: NestedEnumRoleTypeWithAggregatesFilter | RoleType
    _count?: NestedIntFilter
    _min?: NestedEnumRoleTypeFilter
    _max?: NestedEnumRoleTypeFilter
  }

  export type NestedEnumUserStatusWithAggregatesFilter = {
    equals?: UserStatus
    in?: Enumerable<UserStatus>
    notIn?: Enumerable<UserStatus>
    not?: NestedEnumUserStatusWithAggregatesFilter | UserStatus
    _count?: NestedIntFilter
    _min?: NestedEnumUserStatusFilter
    _max?: NestedEnumUserStatusFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type OrganisationCreateWithoutUsersInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    resumeSources?: ResumeSourceCreateNestedManyWithoutOrganisationInput
    skills?: SkillCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUncheckedCreateWithoutUsersInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    resumeSources?: ResumeSourceUncheckedCreateNestedManyWithoutOrganisationInput
    skills?: SkillUncheckedCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationCreateOrConnectWithoutUsersInput = {
    where: OrganisationWhereUniqueInput
    create: XOR<OrganisationCreateWithoutUsersInput, OrganisationUncheckedCreateWithoutUsersInput>
  }

  export type OrganisationUpsertWithoutUsersInput = {
    update: XOR<OrganisationUpdateWithoutUsersInput, OrganisationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganisationCreateWithoutUsersInput, OrganisationUncheckedCreateWithoutUsersInput>
  }

  export type OrganisationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    resumeSources?: ResumeSourceUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    resumeSources?: ResumeSourceUncheckedUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUncheckedUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationCreateWithoutResumeSourcesInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserCreateNestedManyWithoutOrganisationInput
    skills?: SkillCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUncheckedCreateWithoutResumeSourcesInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserUncheckedCreateNestedManyWithoutOrganisationInput
    skills?: SkillUncheckedCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationCreateOrConnectWithoutResumeSourcesInput = {
    where: OrganisationWhereUniqueInput
    create: XOR<OrganisationCreateWithoutResumeSourcesInput, OrganisationUncheckedCreateWithoutResumeSourcesInput>
  }

  export type OrganisationUpsertWithoutResumeSourcesInput = {
    update: XOR<OrganisationUpdateWithoutResumeSourcesInput, OrganisationUncheckedUpdateWithoutResumeSourcesInput>
    create: XOR<OrganisationCreateWithoutResumeSourcesInput, OrganisationUncheckedCreateWithoutResumeSourcesInput>
  }

  export type OrganisationUpdateWithoutResumeSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationUncheckedUpdateWithoutResumeSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutOrganisationNestedInput
    skills?: SkillUncheckedUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationCreateWithoutSkillsInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserCreateNestedManyWithoutOrganisationInput
    resumeSources?: ResumeSourceCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationUncheckedCreateWithoutSkillsInput = {
    id?: string
    companyName: string
    companyDescription?: string | null
    users?: UserUncheckedCreateNestedManyWithoutOrganisationInput
    resumeSources?: ResumeSourceUncheckedCreateNestedManyWithoutOrganisationInput
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type OrganisationCreateOrConnectWithoutSkillsInput = {
    where: OrganisationWhereUniqueInput
    create: XOR<OrganisationCreateWithoutSkillsInput, OrganisationUncheckedCreateWithoutSkillsInput>
  }

  export type OrganisationUpsertWithoutSkillsInput = {
    update: XOR<OrganisationUpdateWithoutSkillsInput, OrganisationUncheckedUpdateWithoutSkillsInput>
    create: XOR<OrganisationCreateWithoutSkillsInput, OrganisationUncheckedCreateWithoutSkillsInput>
  }

  export type OrganisationUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutOrganisationNestedInput
    resumeSources?: ResumeSourceUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrganisationUncheckedUpdateWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    companyDescription?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutOrganisationNestedInput
    resumeSources?: ResumeSourceUncheckedUpdateManyWithoutOrganisationNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutOrganisationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUncheckedCreateWithoutOrganisationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserCreateOrConnectWithoutOrganisationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganisationInput, UserUncheckedCreateWithoutOrganisationInput>
  }

  export type UserCreateManyOrganisationInputEnvelope = {
    data: Enumerable<UserCreateManyOrganisationInput>
    skipDuplicates?: boolean
  }

  export type ResumeSourceCreateWithoutOrganisationInput = {
    id?: string
    sourceName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceUncheckedCreateWithoutOrganisationInput = {
    id?: string
    sourceName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceCreateOrConnectWithoutOrganisationInput = {
    where: ResumeSourceWhereUniqueInput
    create: XOR<ResumeSourceCreateWithoutOrganisationInput, ResumeSourceUncheckedCreateWithoutOrganisationInput>
  }

  export type ResumeSourceCreateManyOrganisationInputEnvelope = {
    data: Enumerable<ResumeSourceCreateManyOrganisationInput>
    skipDuplicates?: boolean
  }

  export type SkillCreateWithoutOrganisationInput = {
    id?: string
    skillName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillUncheckedCreateWithoutOrganisationInput = {
    id?: string
    skillName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillCreateOrConnectWithoutOrganisationInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutOrganisationInput, SkillUncheckedCreateWithoutOrganisationInput>
  }

  export type SkillCreateManyOrganisationInputEnvelope = {
    data: Enumerable<SkillCreateManyOrganisationInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganisationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganisationInput, UserUncheckedUpdateWithoutOrganisationInput>
    create: XOR<UserCreateWithoutOrganisationInput, UserUncheckedCreateWithoutOrganisationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganisationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganisationInput, UserUncheckedUpdateWithoutOrganisationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganisationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    profilePicture?: StringNullableFilter | string | null
    role?: EnumRoleTypeFilter | RoleType
    status?: EnumUserStatusFilter | UserStatus
    loginAccess?: BoolFilter | boolean
    organisationId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type ResumeSourceUpsertWithWhereUniqueWithoutOrganisationInput = {
    where: ResumeSourceWhereUniqueInput
    update: XOR<ResumeSourceUpdateWithoutOrganisationInput, ResumeSourceUncheckedUpdateWithoutOrganisationInput>
    create: XOR<ResumeSourceCreateWithoutOrganisationInput, ResumeSourceUncheckedCreateWithoutOrganisationInput>
  }

  export type ResumeSourceUpdateWithWhereUniqueWithoutOrganisationInput = {
    where: ResumeSourceWhereUniqueInput
    data: XOR<ResumeSourceUpdateWithoutOrganisationInput, ResumeSourceUncheckedUpdateWithoutOrganisationInput>
  }

  export type ResumeSourceUpdateManyWithWhereWithoutOrganisationInput = {
    where: ResumeSourceScalarWhereInput
    data: XOR<ResumeSourceUpdateManyMutationInput, ResumeSourceUncheckedUpdateManyWithoutResumeSourcesInput>
  }

  export type ResumeSourceScalarWhereInput = {
    AND?: Enumerable<ResumeSourceScalarWhereInput>
    OR?: Enumerable<ResumeSourceScalarWhereInput>
    NOT?: Enumerable<ResumeSourceScalarWhereInput>
    id?: StringFilter | string
    sourceName?: StringFilter | string
    organisationId?: StringFilter | string
    deleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type SkillUpsertWithWhereUniqueWithoutOrganisationInput = {
    where: SkillWhereUniqueInput
    update: XOR<SkillUpdateWithoutOrganisationInput, SkillUncheckedUpdateWithoutOrganisationInput>
    create: XOR<SkillCreateWithoutOrganisationInput, SkillUncheckedCreateWithoutOrganisationInput>
  }

  export type SkillUpdateWithWhereUniqueWithoutOrganisationInput = {
    where: SkillWhereUniqueInput
    data: XOR<SkillUpdateWithoutOrganisationInput, SkillUncheckedUpdateWithoutOrganisationInput>
  }

  export type SkillUpdateManyWithWhereWithoutOrganisationInput = {
    where: SkillScalarWhereInput
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyWithoutSkillsInput>
  }

  export type SkillScalarWhereInput = {
    AND?: Enumerable<SkillScalarWhereInput>
    OR?: Enumerable<SkillScalarWhereInput>
    NOT?: Enumerable<SkillScalarWhereInput>
    id?: StringFilter | string
    skillName?: StringFilter | string
    organisationId?: StringFilter | string
    deleted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeNullableFilter | Date | string | null
  }

  export type UserCreateManyOrganisationInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    profilePicture?: string | null
    role: RoleType
    status?: UserStatus
    loginAccess?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ResumeSourceCreateManyOrganisationInput = {
    id?: string
    sourceName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SkillCreateManyOrganisationInput = {
    id?: string
    skillName: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    profilePicture?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleTypeFieldUpdateOperationsInput | RoleType
    status?: EnumUserStatusFieldUpdateOperationsInput | UserStatus
    loginAccess?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceUncheckedUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ResumeSourceUncheckedUpdateManyWithoutResumeSourcesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillUncheckedUpdateWithoutOrganisationInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SkillUncheckedUpdateManyWithoutSkillsInput = {
    id?: StringFieldUpdateOperationsInput | string
    skillName?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}